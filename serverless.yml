service: sayit-backend
frameworkVersion: "2"

plugins:
  - serverless-iam-roles-per-function
  - serverless-step-functions

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  stage: dev
  lambdaHashingVersion: 20201221
  environment:
    STAGE: ${self:custom.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"

package:
  patterns:
    - "!package-lock.json"
    - "!package.json"

custom:
  region: ${opt:region, self:provider.region}
  stage: ${opt:stage, self:provider.stage}

functions:
  startInputProcessing:
    handler: functions/start-input-processing.handler
    events:
      - s3: 
          bucket: sayit.input.${self:custom.stage}
          event: s3:ObjectCreated:*    
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - states:StartExecution
        Resource: 
          - "*"
    environment:
      INPUT_BUCKET_NAME: sayit.input.${self:custom.stage}
      INPUT_BUCKET_URL: http://s3.amazonaws.com/sayit.input.${self:custom.stage}/
      INPUT_PROCESSING_STATE_MACHINE_ARN: ${self:resources.Outputs.InputProcessingStateMachine.Value}

  startTextAnalysis:
    handler: functions/start-text-analysis.handler
    environment:
      INPUT_BUCKET_URL: http://s3.amazonaws.com/sayit.input.${self:custom.stage}/
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - transcribe:StartTranscriptionJob
        Resource: 
          - "*"
      - Effect: "Allow"
        Action:
          - s3:GetObject
        Resource:
          - "arn:aws:s3:::sayit.input.${self:custom.stage}"
          - "arn:aws:s3:::sayit.input.${self:custom.stage}/*"
  finishTextAnalysis:
    handler: functions/finish-text-analysis.handler
    environment:
      INPUT_BUCKET_URL: http://s3.amazonaws.com/sayit.input.${self:custom.stage}/
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - transcribe:GetTranscriptionJob
        Resource: 
          - "*"

  cutVideo:
    handler: functions/cut-video.handler
    environment:
      INPUT_BUCKET_NAME: sayit.input.${self:custom.stage}
      TO_MERGE_BUCKET_NAME: sayit.tomerge.${self:custom.stage}
      TO_MERGE_TABLE_NAME: !Ref VideosToMergeTable
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - 's3:GetObject'
        Resource: 
          - arn:aws:s3:::sayit.input.${self:custom.stage}
          - arn:aws:s3:::sayit.input.${self:custom.stage}/*
      - Effect: "Allow"
        Action:
          - 's3:PutObject'
        Resource: 
          - arn:aws:s3:::sayit.tomerge.${self:custom.stage}
          - arn:aws:s3:::sayit.tomerge.${self:custom.stage}/*
      - Effect: "Allow"
        Action:
          - 'dynamodb:PutItem'
        Resource: 
          - !GetAtt VideosToMergeTable.Arn

  mosaic:
    handler: functions/mosaic.handler
    environment:
      TO_PUBLISH_BUCKET_NAME: sayit.topublish.${self:custom.stage}
      TO_MERGE_BUCKET_NAME: sayit.tomerge.${self:custom.stage}
      TO_MERGE_TABLE_NAME: !Ref VideosToMergeTable
      VIDEO_COUNT_TO_MERGE: 4
    events:
      - s3: 
          bucket: sayit.tomerge.${self:custom.stage}
          event: s3:ObjectCreated:*
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - 's3:GetObject'
        Resource: 
          - arn:aws:s3:::sayit.tomerge.${self:custom.stage}
          - arn:aws:s3:::sayit.tomerge.${self:custom.stage}/*
      - Effect: "Allow"
        Action:
          - 's3:PutObject'
        Resource: 
          - arn:aws:s3:::sayit.topublish.${self:custom.stage}
          - arn:aws:s3:::sayit.topublish.${self:custom.stage}/*
      - Effect: "Allow"
        Action:
          - 'dynamodb:Query'
          - 'dynamodb:UpdateItem'
        Resource: 
          - !GetAtt VideosToMergeTable.Arn

stepFunctions:
  stateMachines:
    inputProcessingStateMachine:
      name: SayitInputProcessingStateMachine${self:custom.stage}
      definition:
        StartAt: StartTextAnalysis
        States:
          StartTextAnalysis:
            Type: Task
            Resource: !GetAtt startTextAnalysis.Arn
            Next: Wait5Seconds
          Wait5Seconds:
            Type: Wait
            Seconds: 5
            Next: FinishTextAnalysis            
          FinishTextAnalysis:
            Type: Task
            Resource: !GetAtt finishTextAnalysis.Arn
            Next: CutVideo
          CutVideo:
            Type: Task
            Resource: !GetAtt cutVideo.Arn
            End: true
           

resources:
  Resources:
    Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: sayit.topublish.${self:custom.stage}

    VideosToMergeTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: "S"
          - AttributeName: isMerged
            AttributeType: "N"
        Tags:
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: sayit-videos-to-merged-table
        GlobalSecondaryIndexes:
          - IndexName: byIsMerged
            KeySchema:
              - AttributeName: isMerged
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
  Outputs:
    AwsRegion:
      Value: ${self:custom.region}

    InputProcessingStateMachine:
      Description: The ARN of the input processing state machine
      Value:
        Ref: SayitInputProcessingStateMachine${self:custom.stage}